{"version":3,"sources":["ingredients.js","showRecipe.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["CreateMeal","props","ingredients","i","data","push","showIngredients","map","item","key","showRecipe","className","strMeal","src","strMealThumb","alt","strInstructions","title","strYoutube","slice","Header","href","width","height","App","state","isShown","handleClick","bind","fetch","then","response","json","setState","meals","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAiBeA,MAff,SAAqBC,GAErB,IADA,IAAMC,EAAc,GACZC,EAAI,EAAGA,GAAI,IACZF,EAAMG,KAAN,uBAA2BD,IADXA,IAEfD,EAAYG,KAAZ,UAAoBJ,EAAMG,KAAN,uBAA2BD,IAA/C,cAAyDF,EAAMG,KAAN,oBAAwBD,MAMzF,IAAMG,EAAkBJ,EAAYK,KAAI,SAACC,GAAD,OAAU,wBAAIC,IAAKD,GAAT,IAAiBA,MACnE,OACA,4BAAKF,ICuBUI,MAjCf,SAAqBT,GAEjB,OACA,yBAAKU,UAAU,aACX,4BAAKV,EAAMG,KAAKQ,SAChB,6BACJ,yBAAKD,UAAU,OACX,yBAAKA,UAAU,YAEf,yBAAKA,UAAU,YAAYE,IAAKZ,EAAMG,KAAKU,aAAcC,IAAI,aAG7D,yBAAKJ,UAAU,wBAEX,4CACA,kBAAC,EAAD,CAAYP,KAAMH,EAAMG,QAG3B,yBAAKO,UAAU,aACf,6BACG,4CACA,2BAAIV,EAAMG,KAAKY,mBAIvB,6BACA,8CACA,yBAAKL,UAAU,2CACjB,4BAAQA,UAAU,wBAAwBM,MAAQ,QAAOJ,IAAG,wCAAmCZ,EAAMG,KAAKc,WAAWC,OAAO,MAA5H,wBC7Ba,SAASC,IACxB,OACI,yBAAKT,UAAU,8BACf,uBAAGA,UAAU,2BAA2BU,KAAK,KAC7C,yBAAKR,IAAI,kBAAkBS,MAAM,KAAKC,OAAO,KAAKZ,UAAU,gCAAgCI,IAAI,KADhG,kB,ICqCWS,E,YArCb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDwB,MAAQ,CACXrB,KAAK,GACLsB,SAAQ,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,2EAUJ,IAAD,OAEZC,MAAM,sDACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACtBF,MAAK,SAAAC,GAAQ,OAAI,EAAKE,SAAS,CAAE7B,KAAM2B,EAASG,MAAOR,SAAQ,S,+BAOpE,OACE,yBAAKf,UAAU,OACb,kBAACS,EAAD,MACA,yBAAKT,UAAU,SACb,+CAIA,4BAAQA,UAAU,WAAWwB,QAASC,KAAKT,aAA3C,uBAEDS,KAAKX,MAAMC,QAAU,kBAAC,EAAD,CAAYtB,KAAMgC,KAAKX,MAAMrB,KAAK,KAAQ,U,GAhCpDiC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.5f164249.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction CreateMeal (props) {\r\nconst ingredients = [];\r\nfor(let i = 1; i <=20; i ++){\r\n    if(props.data[`strIngredient${i}`]) {\r\n        ingredients.push(`${props.data[`strIngredient${i}`]} - ${props.data[`strMeasure${i}`]}`)\r\n    } else {\r\n        // Stop if no more ingredients\r\n        break;\r\n    }\r\n}\r\nconst showIngredients = ingredients.map((item) => <li key={item}> {item}</li>)\r\nreturn (\r\n<ul>{showIngredients}</ul>\r\n)\r\n}\r\nexport default CreateMeal;","import React from 'react';\r\nimport CreateMeal from './ingredients';\r\n\r\n\r\nfunction showRecipe (props){\r\n   \r\n    return(\r\n    <div className=\"container\">\r\n        <h1>{props.data.strMeal}</h1>\r\n        <hr/>\r\n    <div className=\"row\">    \r\n        <div className=\"col-lg-5\">   \r\n\r\n        <img className=\"dinnerImg\" src={props.data.strMealThumb} alt=\"mealImg\" />\r\n\r\n        </div>\r\n        <div className=\"col-lg-7 ingredients\">\r\n        \r\n            <h4>Ingredients:</h4>\r\n            <CreateMeal data={props.data}/>\r\n\r\n         </div>\r\n         <div className=\"col-lg-12\">\r\n         <hr/>\r\n            <h3>Instructions</h3>\r\n            <p>{props.data.strInstructions}</p>\r\n\r\n        </div>\r\n    </div>\r\n    <hr/>\r\n    <h2>Video tutorial</h2>\r\n    <div className=\"embed-responsive embed-responsive-21by9\">\r\n  <iframe className=\"embed-responsive-item\" title = \"video\"src={`https://www.youtube.com/embed/${props.data.strYoutube.slice(-11)}`}> allowFullScreen></iframe>\r\n</div>\r\n    </div>\r\n    )\r\n}\r\nexport default showRecipe;","import React from 'react';\r\n//import DinnerIcon from '/dinner-icon.png';\r\n\r\nexport default function Header (){\r\nreturn(\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n    <a className=\"navbar-brand h1 mxs-auto\" href=\"#\">\r\n    <img src=\"dinner-icon.png\" width=\"40\" height=\"40\" className=\"d-inline-block align-top logo\" alt=\"\"/>\r\n    GetRandomMeal\r\n     </a>\r\n    </nav>\r\n)\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport ShowRecipe from './showRecipe';\r\nimport Header from './Header';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Nie wywoÅ‚uj tutaj this.setState()!\r\n    this.state = { \r\n      data:[] ,\r\n      isShown:false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  } \r\n\r\n  handleClick() {\r\n    \r\n    fetch('https://www.themealdb.com/api/json/v1/1/random.php')\r\n\t\t.then(response => response.json())\r\n      .then(response => this.setState({ data: response.meals, isShown:true})\r\n      \r\n      );\r\n  }\r\n  \r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      <div className=\"title\">\r\n        <h1>\r\n          Feeling hungry?\r\n        </h1>\r\n        \r\n        <button className=\"myButton\" onClick={this.handleClick}>Get a random meal!</button>\r\n        </div>\r\n      {this.state.isShown ? <ShowRecipe data={this.state.data[0]}/> : null }\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}